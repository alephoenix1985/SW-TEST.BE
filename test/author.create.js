'use strict';
let _tempData;

// tests for author.create
// Generated by serverless-mocha-plugin

// const mochaPlugin = require('serverless-mocha-plugin');
// const expect = mochaPlugin.chai.expect;
// let wrapped = mochaPlugin.getWrapper('author.create', '/src/functions/author.js', 'add');
//
// describe('author.create mocha', () => {

//     const author = {
//         "name": "Name Test",
//         "email": "email@test.com",
//         "birthDate": "1985-01-12"
//     };
//     it('implement tests here', () => {
//         return wrapped.run({body: JSON.stringify({author: author})})
//             .then((response) => {
//                 console.log('mochaPlugin', mochaPlugin)
//                 _tempData = response.body && JSON.parse(response.body);
//                 expect(response.statusCode).to.eq(200)
//             });
//     });
//     it('implement tests here', () => {
//         console.log('_tempData', _tempData)
//     });
// });


const request = require('supertest');
const SERVER_URL = 'http://localhost:3000';

describe('author.create request', () => {
    const author = {
        "name": "Name Test Created",
        "email": "email@test.com",
        "birthDate": "1985-01-12"
    };
    it('CREATE AUTHOR TEST', (done) => {
        request(SERVER_URL)
            .post('/author')
            .send({author})
            .set('Accept', 'application/json')
            .expect('Content-Type', /json/)
            .expect(200)
            .end((err, res) => {
                if (err) return done(err);
                _tempData = res.body;
                console.log('Done Creating: id' + _tempData.id);
                done();
            });
    });
    it('EDIT AUTHOR DATA WITH ID', (done) => {
        const oldValue = _tempData.name;
        _tempData.name = _tempData.name.replace('Created', 'Updated');
        const updateAuthor = _tempData;
        request(SERVER_URL)
            .put('/author/' + updateAuthor.id)
            .send({author: updateAuthor})
            .set('Accept', 'application/json')
            .expect('Content-Type', /json/)
            .expect(200)
            .end((err, res) => {
                if (err) return done(err);
                console.log('Done Editing field[Name]: [' + oldValue + '] -> [' + res.body.name + ']');
                _tempData = Object.assign(_tempData, res.body);
                done();
            });
    });
    it('GET AUTHOR DATA WITH ID', (done) => {
        const updateAuthor = _tempData;
        request(SERVER_URL)
            .get('/author/' + updateAuthor.id)
            .set('Accept', 'application/json')
            .expect(200)
            .end((err, res) => {
                if (err) return done(err);
                _tempData = res.body;
                console.log('Done Getting: id' + _tempData.id);
                done();
            });
    });
    it('GET ALL AUTHOR DATA', (done) => {
        request(SERVER_URL)
            .get('/author')
            .set('Accept', 'application/json')
            .expect(200)
            .end((err, res) => {
                if (err) return done(err);
                console.log('Done Getting: ' + res.body.Count + ' Author' + (res.body.Count > 1 ? '(s)' : ''));
                done();
            });
    });
    it('DELETE AUTHOR DATA WITH ID', (done) => {
        const updateAuthor = _tempData;
        request(SERVER_URL)
            .delete('/author/' + updateAuthor.id)
            .set('Accept', 'application/json')
            .expect(200)
            .end((err, res) => {
                if (err) return done(err);
                // _tempData = res.body;
                console.log('Done Deleting: id' + _tempData.id);
                done();
            });
    });
});
